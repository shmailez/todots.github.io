{"version":3,"sources":["redux/Slices/TodoSlice.ts","redux/index.ts","hooks.ts","components/InputField.tsx","components/TodoItem.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["todoAdapter","createEntityAdapter","selectId","todo","id","TodoSlice","createSlice","name","initialState","getInitialState","reducers","addTodo","addOne","removeTodo","removeOne","updateTodo","updateOne","removeAll","todoSelector","getSelectors","state","todos","_TodoSlice$actions","actions","store","configureStore","reducer","todoReducer","useAppDispatch","useDispatch","InputField","useSelector","_useState","useState","_useState2","_slicedToArray","title","setTitle","dispatch","React","createElement","className","value","onChange","e","target","onClick","trim","length","Date","toISOString","completed","TodoItem","_ref","edit","setEdit","_useState3","_useState4","currentTitle","setCurrentTitle","key","type","checked","changes","style","display","onSubmit","preventDefault","prev","TodoList","selectAll","console","log","Fragment","map","Object","assign","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","Provider"],"mappings":"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","file":"static/js/main.83db09f9.chunk.js","sourcesContent":["import { createEntityAdapter, createSlice } from '@reduxjs/toolkit'\r\nimport { RootState } from '../store'\r\n\r\ntype Todo = {\r\n    id: string\r\n    title: string\r\n    completed: boolean\r\n}\r\n\r\nconst todoAdapter = createEntityAdapter<Todo>({\r\n    selectId: (todo) => todo.id\r\n})\r\n\r\nconst TodoSlice = createSlice({\r\n    name: 'todos', \r\n    initialState: todoAdapter.getInitialState(), \r\n    reducers: {\r\n        addTodo: todoAdapter.addOne, \r\n        removeTodo: todoAdapter.removeOne, \r\n        updateTodo: todoAdapter.updateOne, \r\n        removeAll: todoAdapter.removeAll\r\n    }\r\n})\r\n\r\nexport const todoSelector = todoAdapter.getSelectors<RootState>((state) => state.todos)\r\n\r\nexport const {addTodo, removeTodo, updateTodo, removeAll} = TodoSlice.actions\r\n\r\nexport default TodoSlice.reducer","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport todoReducer from \"./Slices/TodoSlice\";\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        todos: todoReducer\r\n    }\r\n})\r\n\r\nexport default store\r\n\r\nexport type RootState = ReturnType<typeof store.getState>\r\nexport type AppDispatch = typeof store.dispatch","import { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux'\r\nimport type { RootState, AppDispatch } from './redux'\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector","import React, { useState } from \"react\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { addTodo } from \"../redux/Slices/TodoSlice\";\r\n\r\nconst InputField: React.FC = () => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const dispatch = useAppDispatch();\r\n\r\n  const handleAction = () => {\r\n    if (title.trim().length) {\r\n      dispatch(\r\n        addTodo({\r\n          title: title,\r\n          id: new Date().toISOString(),\r\n          completed: false,\r\n        })\r\n      );\r\n      setTitle(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-field\">\r\n      <input value={title} onChange={(e) => setTitle(e.target.value)} />\r\n      <button className=\"add-button\" onClick={handleAction}>\r\n        {\" \"}\r\n        add{\" \"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default InputField;\r\n","import React, { useState } from \"react\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { removeTodo, updateTodo } from \"../redux/Slices/TodoSlice\";\r\n\r\ninterface TodoItemProps {\r\n  id: string;\r\n  title: string;\r\n  completed: boolean;\r\n}\r\n\r\nconst TodoItem: React.FC<TodoItemProps> = ({ id, title, completed }) => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const [edit, setEdit] = useState(false);\r\n\r\n  const [currentTitle, setCurrentTitle] = useState(title);\r\n\r\n  const formSubmit = (e: { preventDefault: () => void }) => {\r\n    e.preventDefault();\r\n\r\n    setEdit((prev) => !prev);\r\n\r\n    dispatch(updateTodo({ id: id, changes: { title: currentTitle } }));\r\n  };\r\n  return (\r\n    <li key={id}>\r\n      <input\r\n        type=\"checkbox\"\r\n        checked={completed}\r\n        onChange={() =>\r\n          dispatch(\r\n            updateTodo({\r\n              id: id,\r\n              changes: { completed: !completed },\r\n            })\r\n          )\r\n        }\r\n      />\r\n      <span style={{ display: edit ? \"none\" : \"\" }}>{title}</span>\r\n      <form onSubmit={formSubmit} style={{ display: edit ? \"inline\" : \"none\" }}>\r\n        <input\r\n          value={currentTitle}\r\n          onChange={(e) => setCurrentTitle(e.target.value)}\r\n        />\r\n      </form>\r\n      <span className=\"span-button\" onClick={() => setEdit((prev) => !prev)}>\r\n        Change\r\n      </span>\r\n      <span className=\"span-button\" onClick={() => dispatch(removeTodo(id))}>\r\n        DEL\r\n      </span>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default TodoItem;\r\n","import TodoItem from \"./TodoItem\";\r\nimport React from \"react\";\r\nimport { useAppDispatch } from \"../hooks\";\r\nimport { removeAll, todoSelector } from \"../redux/Slices/TodoSlice\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst TodoList: React.FC = () => {\r\n  const dispatch = useAppDispatch();\r\n\r\n  const todos = useSelector(todoSelector.selectAll);\r\n\r\n  console.log(todos);\r\n\r\n  return (\r\n    <>\r\n      <button className=\"dell-button\" onClick={() => dispatch(removeAll())}>\r\n        {\" \"}\r\n        DELETE ALL TODO{\" \"}\r\n      </button>\r\n      <ul>\r\n        {todos.map((todo) => (\r\n          <TodoItem key={todo.id} {...todo} />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport InputField from \"./components/InputField\";\nimport TodoList from \"./components/TodoList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <InputField />\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/index\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(\n  document.getElementById(\"root\") as HTMLElement\n);\nroot.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}